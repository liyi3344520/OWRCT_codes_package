lines(n_grid,mse_result[,3]/mse_result[,1],col="red")
points(n_grid,mse_result[,3]/mse_result[,1],col="red",pch=2)
lines(n_grid,mse_result[,4]/mse_result[,1],col="green")
points(n_grid,mse_result[,4]/mse_result[,1],col="green",pch=3)
lines(n_grid,mse_result[,5]/mse_result[,1],col="blue")
points(n_grid,mse_result[,5]/mse_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,var_result[,2]/var_result[,1],type='o',ylim=c(0.15,0.3),main="Variance, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,var_result[,3]/var_result[,1],col="red")
points(n_grid,var_result[,3]/var_result[,1],col="red",pch=2)
lines(n_grid,var_result[,4]/var_result[,1],col="green")
points(n_grid,var_result[,4]/var_result[,1],col="green",pch=3)
lines(n_grid,var_result[,5]/var_result[,1],col="blue")
points(n_grid,var_result[,5]/var_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
library(MASS)
rm(list=ls())
mse_result=NULL
var_result=NULL
p=5
sigma_x=2
sigma_y=2
rho=0.0
n_simu=2000
#Covariate Effect
#beta=(-1)^(1:p)*((1:p)%%3)/2
covariate_sigma=sqrt(sigma_y^2/p)
beta=rep(1,p)*covariate_sigma
#Model for Heterogeneous TE
beta_tau=0
#beta_tau=(-1)^(2:(1+p))*((1:p)%%4)/2*1.0
true_te=2
n_grid=c(2,3,4,5,6,7,8,9,10)*25
for (n in n_grid){
IPW_estimate=numeric(n_simu)
OW_estimate=numeric(n_simu)
LR_estimate=numeric(n_simu)
DR_estimate=numeric(n_simu)
Naive_estimate=numeric(n_simu)
#oracle=numeric(n_simu)
for (k in (1:n_simu)){
X=mvrnorm(n,mu=rep(0,p),Sigma=sigma_x^2*(diag(rep(1,p))*(1-rho)+matrix(1,p,p)*rho))
Y_0=X%*%beta+rnorm(n,sd=sigma_y)
Y_1=X%*%(beta+beta_tau)+true_te+rnorm(n,sd=sigma_y)
Tr=sample(c(1,0),n,prob=c(0.5,0.5),replace=T)
#Tr=rep(0,n)
#Tr[sample(1:n,n/2,replace=F)]=1
Y_obs=Y_0*(1-Tr)+Y_1*Tr
##Standardize X
X=scale(X,scale=FALSE)
#X=scale(X)
psmodel=glm(Tr~X,family = binomial(link="logit"))
ps=fitted(psmodel)
IPW_weights=Tr*1/ps+(1-Tr)*1/(1-ps)
OW_weights=Tr*(1-ps)+(1-Tr)*ps
##Normalize
IPW_weights[Tr==1]=IPW_weights[Tr==1]/mean(IPW_weights[Tr==1])
IPW_weights[Tr==0]=IPW_weights[Tr==0]/mean(IPW_weights[Tr==0])
##Normalize
OW_weights[Tr==1]=OW_weights[Tr==1]/mean(OW_weights[Tr==1])
OW_weights[Tr==0]=OW_weights[Tr==0]/mean(OW_weights[Tr==0])
IPW_estimate[k]=mean(IPW_weights[Tr==1]*Y_obs[Tr==1])-mean(IPW_weights[Tr==0]*Y_obs[Tr==0])
OW_estimate[k]=mean(OW_weights[Tr==1]*Y_obs[Tr==1])-mean(OW_weights[Tr==0]*Y_obs[Tr==0])
Naive_estimate[k]=mean(Y_obs[Tr==1])-mean(Y_obs[Tr==0])
#oracle[k]=mean(Y_1)-mean(Y_0)
lr_model=lm(Y_obs~Tr+X+X*Tr)
LR_estimate[k]=lr_model$coefficients['Tr']
##Double Robust
m1=predict.lm(lr_model,newdata=data.frame(Tr=rep(1,n),X=X))
m0=predict.lm(lr_model,newdata=data.frame(Tr=rep(0,n),X=X))
DR_estimate[k]=mean(Tr*(Y_obs-m1)*IPW_weights+(1-Tr)*(Y_obs-m0)*IPW_weights)+LR_estimate[k]
if (k%%100==0){
print(paste(k,"th finished"))}
}
# plot(density(OW_estimate),
#      main=paste("Comparison,n=",n,",p=",p,sep=""),col="red",lwd=1.5)
# lines(density(IPW_estimate),col='blue',lwd=1.5)
# lines(density(Naive_estimate),col='black',lwd=1.5)
# lines(density(LR_estimate),col='orange',lwd=1.5)
# lines(density(DR_estimate),col='green',lwd=1.5)
# legend("topright",legend=c("OW","IPW","Unadjust","LR","DR"),
#        col=c("red","blue","black","orange","green"),lty=1)
# abline(v=true_te,lty=2)
print(paste(n," finished"))
mse_result = rbind(mse_result,c(
mean((Naive_estimate - true_te) ^ 2),
mean((IPW_estimate - true_te) ^ 2),
mean((OW_estimate - true_te) ^ 2),
mean((LR_estimate - true_te) ^ 2),
mean((DR_estimate - true_te) ^ 2)))
var_result = rbind(var_result, c(
var(Naive_estimate),
var(IPW_estimate),
var(OW_estimate),
var(LR_estimate),
var(DR_estimate)
))
}
plot(n_grid,mse_result[,2]/mse_result[,1],type='o',ylim=c(0.15,0.3),main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3]/mse_result[,1],col="red")
points(n_grid,mse_result[,3]/mse_result[,1],col="red",pch=2)
lines(n_grid,mse_result[,4]/mse_result[,1],col="green")
points(n_grid,mse_result[,4]/mse_result[,1],col="green",pch=3)
lines(n_grid,mse_result[,5]/mse_result[,1],col="blue")
points(n_grid,mse_result[,5]/mse_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,var_result[,2]/var_result[,1],type='o',ylim=c(0.15,0.3),main="Variance, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,var_result[,3]/var_result[,1],col="red")
points(n_grid,var_result[,3]/var_result[,1],col="red",pch=2)
lines(n_grid,var_result[,4]/var_result[,1],col="green")
points(n_grid,var_result[,4]/var_result[,1],col="green",pch=3)
lines(n_grid,var_result[,5]/var_result[,1],col="blue")
points(n_grid,var_result[,5]/var_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,mse_result[,2],type='o',ylim=c(0.15,0.3),main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3],col="red")
points(n_grid,mse_result[,3],col="red",pch=2)
lines(n_grid,mse_result[,4],col="green")
points(n_grid,mse_result[,4],col="green",pch=3)
lines(n_grid,mse_result[,5],col="blue")
points(n_grid,mse_result[,5],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,mse_result[,2],type='o',main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3],col="red")
points(n_grid,mse_result[,3],col="red",pch=2)
lines(n_grid,mse_result[,4],col="green")
points(n_grid,mse_result[,4],col="green",pch=3)
lines(n_grid,mse_result[,5],col="blue")
points(n_grid,mse_result[,5],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
mse_result=mse_result*100
plot(n_grid,mse_result[,2],type='o',main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3],col="red")
points(n_grid,mse_result[,3],col="red",pch=2)
lines(n_grid,mse_result[,4],col="green")
points(n_grid,mse_result[,4],col="green",pch=3)
lines(n_grid,mse_result[,5],col="blue")
points(n_grid,mse_result[,5],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
mse_result=mse_result/100
plot(n_grid,mse_result[,2],type='o',main="MSE, divided by unadjusted one",
plot(n_grid,mse_result[,2],type='o',main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3],col="red")
points(n_grid,mse_result[,3],col="red",pch=2)
lines(n_grid,mse_result[,4],col="green")
points(n_grid,mse_result[,4],col="green",pch=3)
lines(n_grid,mse_result[,5],col="blue")
points(n_grid,mse_result[,5],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,mse_result[,2]/mse_result[,1],type='o',ylim=c(0.15,0.3),main="MSE, divided by unadjusted one",
xlab="Sample size",ylab="MSE")
lines(n_grid,mse_result[,3]/mse_result[,1],col="red")
points(n_grid,mse_result[,3]/mse_result[,1],col="red",pch=2)
lines(n_grid,mse_result[,4]/mse_result[,1],col="green")
points(n_grid,mse_result[,4]/mse_result[,1],col="green",pch=3)
lines(n_grid,mse_result[,5]/mse_result[,1],col="blue")
points(n_grid,mse_result[,5]/mse_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
plot(n_grid,mse_result[,2]/mse_result[,1],type='o',ylim=c(0.15,0.3),main="MSE, divided by unadjusted one",
xlab="Sample size,p=20",ylab="MSE")
lines(n_grid,mse_result[,3]/mse_result[,1],col="red")
points(n_grid,mse_result[,3]/mse_result[,1],col="red",pch=2)
lines(n_grid,mse_result[,4]/mse_result[,1],col="green")
points(n_grid,mse_result[,4]/mse_result[,1],col="green",pch=3)
lines(n_grid,mse_result[,5]/mse_result[,1],col="blue")
points(n_grid,mse_result[,5]/mse_result[,1],col="blue",pch=6)
legend("topright",legend=c("IPW","OW","LR","DR"),col=c("black","red","green","blue"),
pch=c(1,2,3,6),lty=1)
mse_result
apply(mse_result,1,FUN=function(x){which.min(x)})
combn(3,52)
combn(13,3)/combn(52,3)*50+combn(26,3)/combn(52,3)*25
combn(13,3)
choose(13,3)/choose(52,3)*50+choose(26,3)/choose(52,3)*25
e=choose(13,3)/choose(52,3)*50+choose(26,3)/choose(52,3)*25
choose(13,3)/choose(52,3)*(50-e)^2+choose(26,3)/choose(52,3)*(25-e)^2+(1-choose(13,3)/choose(52,3)-choose(26,3)/choose(52,3))*e^2
sqrt(choose(13,3)/choose(52,3)*(50-e)^2+choose(26,3)/choose(52,3)*(25-e)^2+(1-choose(13,3)/choose(52,3)-choose(26,3)/choose(52,3))*e^2)
2.2+4.7+15.8+18.3+21.2
62.2*0.41
qnorm(0,14.7,33)
pnorm(0,14.7,33)
pnorm(0,14.7,33)
qnorm(0.85,14.7,33)
pbinom(97,100,0.9)
dbinom(97,100,0.9)
dbinom(3,100,0.9)
dbinom(0,10,0.9)
1-dbinom(0,10,0.9)
pbinom(7,10,0.9)
pbinom(10,10,0.9)
pbinom(8,10,0.9)
1-dbinom(0,10,0.9)-dbinom(1,10,0.9)-dbinom(2,10,0.9)-dbinom(3,10,0.9)
dbinom(97,100,0.9)
dbinom(0,10,0.1)
dbinom(0:3,10,0.1)
sum(dbinom(0,10,0.9)-)
sum(dbinom(0:3,10,0.9))
dbinom(0:3,10,0.1)
sum(dbinom(0:3,10,0.1))
pbinom(3,10,.10)
pbinom(3,10,0.1)
0.212 + 0.183 + 0.153 + 0.047 + 0.022
a=c(2607,48132)
a/sum(a)
pchisq(20.93,4)
1-pchisq(20.93,4)
0.38-0.17
(0.38-0.17)/sqrt(0.38*0.62/2234)
0.17+qnorm(0.975)*(0.17*0.83/2234)
0.17-qnorm(0.975)*sqrt(0.17*0.83/2234)
0.17+qnorm(0.975)*sqrt(0.17*0.83/2234)
setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/OWRCT_codes_package")
###Real Application
rm(list=ls())
library(xtable)
source("Crude.R")
source("IPWC.R")
source("LinearR.R")
source("OW.R")
##Helper function to output all results
output_helper<-function(est,se,level=0.05)
{
res=c(est,se,est-qnorm(1-level/2)*se,est+qnorm(1-level/2)*se,
2*(1-pnorm(abs(est/se))))
names(res)=c("Estimate","SE","95% CI","95% CI","p-value")
return (res)
}
##Some baselines covariates
## age,race,siteid,gender,bmi,ahi_primary,ess_total
##Baseline outcomes
##Resting Blood Pressure
## avgseatedsystolic
## avgseatedpulse
##Baseline sleepness ess_total
baseline_covariates_name=c("age","race_1","race_2",
"site_1","site_2","bmi","gender",
"avgseatedsystolic",
"avgseatedpulse",
"ahi_primary","ess_total_base")
# baseline_covariates_name=c("age","race_1","race_2",
#                            "bmi","gender",
#                            "avgseatedsystolic",
#                            "ahi_primary","ess_total_base")
###Outcome Codename
##Blood Pressure
### bp24sbpweight
### bp24dbpweight
##Self reported index
## ess_total (ESS)
## whiirs_total
##Binary Outcome: Resistant hypertension
##(data.month6$bp24sbpweight>140||data.month6$bp24dbpweight>90)
outcome_name=c("bp24sbpweight","bp24dbpweight",
"ess_total","whiirs_total",
"res_hyper")
##var for treatment info
treated_name=c("pooled_treatmentarm","rand_treatmentarm")
##Read data
data.baseline=read.csv("bestair-baseline-dataset-0.3.0.csv")
data.month6=read.csv("bestair-month6-dataset-0.3.0.csv")
##Rename/Create variable
data.baseline$ess_total_base=data.baseline$ess_total
#Create binary outcome
data.month6$res_hyper=NA
data.month6$res_hyper[data.month6$bp24sbpweight>=130]=1
data.month6$res_hyper[data.month6$bp24sbpweight<130]=0
#Categorical into dummY
data.baseline$race_1=0
data.baseline$race_1[data.baseline$race==1]=1
data.baseline$race_2=0
data.baseline$race_2[data.baseline$race==2]=2
data.baseline$site_1=0
data.baseline$site_1[data.baseline$siteid==1]=1
data.baseline$site_2=0
data.baseline$site_2[data.baseline$siteid==2]=1
#####Analyze 6 months difference
##Merge
baseline_data=data.baseline[data.baseline$nsrrid%in%data.month6$nsrrid,
c("nsrrid",baseline_covariates_name)]
#Delete missing covariates
complete.index=which(!apply(baseline_data,1,FUN=function(x){any(is.na(x))}))
baseline_data=baseline_data[complete.index,]
outcome_data=data.month6[data.month6$nsrrid%in%baseline_data$nsrrid,
c(treated_name,outcome_name)]
pool_data=cbind(baseline_data,outcome_data)
###Analysis on bsp
sbp_data=subset(pool_data,!is.na(bp24sbpweight))
X=as.matrix(sbp_data[,baseline_covariates_name])
y=sbp_data$bp24sbpweight
Tr=sbp_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_sbp=Crude(y=y,z=Tr,W=W)
res_ipw_6_sbp=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0)
res_ow_6_sbp=OW(y=y,z=Tr,W=W)
res_lr_6_sbp=LR(y=y,z=Tr,W=X)
result_6_sbp=rbind(
output_helper(res_unadj_6_sbp$tau,res_unadj_6_sbp$se),
output_helper(res_ipw_6_sbp$tau,res_ipw_6_sbp$se),
output_helper(res_lr_6_sbp$tau,res_lr_6_sbp$se),
output_helper(res_ow_6_sbp$tau,res_ow_6_sbp$se)
)
##ESS_total
ess_data=subset(pool_data,!is.na(ess_total))
X=as.matrix(ess_data[,baseline_covariates_name])
y=ess_data$ess_total
Tr=ess_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_ess=Crude(y=y,z=Tr,W=W)
res_ipw_6_ess=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0)
res_ow_6_ess=OW(y=y,z=Tr,W=W)
res_lr_6_ess=LR(y=y,z=Tr,W=X)
result_6_ess=rbind(
output_helper(res_unadj_6_ess$tau,res_unadj_6_ess$se),
output_helper(res_ipw_6_ess$tau,res_ipw_6_ess$se),
output_helper(res_lr_6_ess$tau,res_lr_6_ess$se),
output_helper(res_ow_6_ess$tau,res_ow_6_ess$se)
)
res_hyper_data=subset(pool_data,!is.na(res_hyper))
X=as.matrix(res_hyper_data[,baseline_covariates_name])
y=res_hyper_data$res_hyper
Tr=res_hyper_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_res=Crude(y=y,z=Tr,W=W,binary=1,log_scale = 1)
res_ipw_6_res=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0,binary=1,log_scale = 1)
res_ow_6_res=OW(y=y,z=Tr,W=W,binary=1,log_scale = 1)
res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F,log_scale = 1)
##Log binomial, fitted 0 or 1, numerical error
#res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F,logit_link=0)
##Mean Difference
result_6_res_mean_diff=rbind(
output_helper(res_unadj_6_res$mean_diff,res_unadj_6_res$se_mean_diff),
output_helper(res_ipw_6_res$mean_diff,res_ipw_6_res$se_mean_diff),
output_helper(res_lr_6_res$mean_diff,res_lr_6_res$se_mean_diff),
output_helper(res_ow_6_res$mean_diff,res_ow_6_res$se_mean_diff)
)
##Risk Ratio
result_6_res_rr=rbind(
output_helper(res_unadj_6_res$log_risk_ratio,res_unadj_6_res$se_risk_ratio),
output_helper(res_ipw_6_res$log_risk_ratio,res_ipw_6_res$se_risk_ratio),
output_helper(res_lr_6_res$log_risk_ratio,res_lr_6_res$se_risk_ratio),
output_helper(res_ow_6_res$log_risk_ratio,res_ow_6_res$se_risk_ratio)
)
##Odds Ratio
result_6_res_or=rbind(
output_helper(res_unadj_6_res$log_odds_ratio,res_unadj_6_res$se_odds_ratio),
output_helper(res_ipw_6_res$log_odds_ratio,res_ipw_6_res$se_odds_ratio),
output_helper(res_lr_6_res$log_odds_ratio,res_lr_6_res$se_odds_ratio),
output_helper(res_ow_6_res$log_odds_ratio,res_ow_6_res$se_odds_ratio)
)
result_6=rbind(result_6_sbp,
result_6_ess,
result_6_res_mean_diff,result_6_res_rr,result_6_res_or)
print(xtable(result_6,digits=3))
res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F,log_scale = 1)
res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F,logit_link=0)
###Real Application
rm(list=ls())
library(xtable)
source("Crude.R")
source("IPWC.R")
source("LinearR.R")
source("OW.R")
##Helper function to output all results
output_helper<-function(est,se,level=0.05)
{
res=c(est,se,est-qnorm(1-level/2)*se,est+qnorm(1-level/2)*se,
2*(1-pnorm(abs(est/se))))
names(res)=c("Estimate","SE","95% CI","95% CI","p-value")
return (res)
}
##Some baselines covariates
## age,race,siteid,gender,bmi,ahi_primary,ess_total
##Baseline outcomes
##Resting Blood Pressure
## avgseatedsystolic
## avgseatedpulse
##Baseline sleepness ess_total
baseline_covariates_name=c("age","race_1","race_2",
"site_1","site_2","bmi","gender",
"avgseatedsystolic",
"avgseatedpulse",
"ahi_primary","ess_total_base")
# baseline_covariates_name=c("age","race_1","race_2",
#                            "bmi","gender",
#                            "avgseatedsystolic",
#                            "ahi_primary","ess_total_base")
###Outcome Codename
##Blood Pressure
### bp24sbpweight
### bp24dbpweight
##Self reported index
## ess_total (ESS)
## whiirs_total
##Binary Outcome: Resistant hypertension
##(data.month6$bp24sbpweight>140||data.month6$bp24dbpweight>90)
outcome_name=c("bp24sbpweight","bp24dbpweight",
"ess_total","whiirs_total",
"res_hyper")
##var for treatment info
treated_name=c("pooled_treatmentarm","rand_treatmentarm")
##Read data
data.baseline=read.csv("bestair-baseline-dataset-0.3.0.csv")
data.month6=read.csv("bestair-month6-dataset-0.3.0.csv")
##Rename/Create variable
data.baseline$ess_total_base=data.baseline$ess_total
#Create binary outcome
data.month6$res_hyper=NA
data.month6$res_hyper[data.month6$bp24sbpweight>=130]=1
data.month6$res_hyper[data.month6$bp24sbpweight<130]=0
#Categorical into dummY
data.baseline$race_1=0
data.baseline$race_1[data.baseline$race==1]=1
data.baseline$race_2=0
data.baseline$race_2[data.baseline$race==2]=2
data.baseline$site_1=0
data.baseline$site_1[data.baseline$siteid==1]=1
data.baseline$site_2=0
data.baseline$site_2[data.baseline$siteid==2]=1
#####Analyze 6 months difference
##Merge
baseline_data=data.baseline[data.baseline$nsrrid%in%data.month6$nsrrid,
c("nsrrid",baseline_covariates_name)]
#Delete missing covariates
complete.index=which(!apply(baseline_data,1,FUN=function(x){any(is.na(x))}))
baseline_data=baseline_data[complete.index,]
outcome_data=data.month6[data.month6$nsrrid%in%baseline_data$nsrrid,
c(treated_name,outcome_name)]
pool_data=cbind(baseline_data,outcome_data)
###Analysis on bsp
sbp_data=subset(pool_data,!is.na(bp24sbpweight))
X=as.matrix(sbp_data[,baseline_covariates_name])
y=sbp_data$bp24sbpweight
Tr=sbp_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_sbp=Crude(y=y,z=Tr,W=W)
res_ipw_6_sbp=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0)
res_ow_6_sbp=OW(y=y,z=Tr,W=W)
res_lr_6_sbp=LR(y=y,z=Tr,W=X)
result_6_sbp=rbind(
output_helper(res_unadj_6_sbp$tau,res_unadj_6_sbp$se),
output_helper(res_ipw_6_sbp$tau,res_ipw_6_sbp$se),
output_helper(res_lr_6_sbp$tau,res_lr_6_sbp$se),
output_helper(res_ow_6_sbp$tau,res_ow_6_sbp$se)
)
##ESS_total
ess_data=subset(pool_data,!is.na(ess_total))
X=as.matrix(ess_data[,baseline_covariates_name])
y=ess_data$ess_total
Tr=ess_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_ess=Crude(y=y,z=Tr,W=W)
res_ipw_6_ess=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0)
res_ow_6_ess=OW(y=y,z=Tr,W=W)
res_lr_6_ess=LR(y=y,z=Tr,W=X)
result_6_ess=rbind(
output_helper(res_unadj_6_ess$tau,res_unadj_6_ess$se),
output_helper(res_ipw_6_ess$tau,res_ipw_6_ess$se),
output_helper(res_lr_6_ess$tau,res_lr_6_ess$se),
output_helper(res_ow_6_ess$tau,res_ow_6_ess$se)
)
res_hyper_data=subset(pool_data,!is.na(res_hyper))
X=as.matrix(res_hyper_data[,baseline_covariates_name])
y=res_hyper_data$res_hyper
Tr=res_hyper_data$pooled_treatmentarm
W=cbind(1,X)
res_unadj_6_res=Crude(y=y,z=Tr,W=W,binary=1)
res_ipw_6_res=IPWC(y.all=y,z.all=Tr,W.all=W,q.all=0,binary=1)
res_ow_6_res=OW(y=y,z=Tr,W=W,binary=1)
res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F)
##Log binomial, fitted 0 or 1, numerical error
#res_lr_6_res=LR(y=y,z=Tr,W=X,binary=1,filter_numeric_error = F,logit_link=0)
##Mean Difference
result_6_res_mean_diff=rbind(
output_helper(res_unadj_6_res$mean_diff,res_unadj_6_res$se_mean_diff),
output_helper(res_ipw_6_res$mean_diff,res_ipw_6_res$se_mean_diff),
output_helper(res_lr_6_res$mean_diff,res_lr_6_res$se_mean_diff),
output_helper(res_ow_6_res$mean_diff,res_ow_6_res$se_mean_diff)
)
##Risk Ratio
result_6_res_rr=rbind(
output_helper(res_unadj_6_res$log_risk_ratio,res_unadj_6_res$se_risk_ratio),
output_helper(res_ipw_6_res$log_risk_ratio,res_ipw_6_res$se_risk_ratio),
output_helper(res_lr_6_res$log_risk_ratio,res_lr_6_res$se_risk_ratio),
output_helper(res_ow_6_res$log_risk_ratio,res_ow_6_res$se_risk_ratio)
)
##Odds Ratio
result_6_res_or=rbind(
output_helper(res_unadj_6_res$log_odds_ratio,res_unadj_6_res$se_odds_ratio),
output_helper(res_ipw_6_res$log_odds_ratio,res_ipw_6_res$se_odds_ratio),
output_helper(res_lr_6_res$log_odds_ratio,res_lr_6_res$se_odds_ratio),
output_helper(res_ow_6_res$log_odds_ratio,res_ow_6_res$se_odds_ratio)
)
result_6=rbind(result_6_sbp,
result_6_ess,
result_6_res_mean_diff,result_6_res_rr,result_6_res_or)
print(xtable(result_6,digits=3))
