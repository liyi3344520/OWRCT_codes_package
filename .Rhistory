setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization")
install.packages("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/PSweight_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages(ggplot2)
install.packages("ggplot2")
install.packages("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/PSweight_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("numDeriv")
install.packages("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/PSweight_0.1.0.tar.gz", repos = NULL, type = "source")
setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/OWRCT_codes_package")
library(sandwith)
library(sandwich)
install.packages("sandw")
install.packages("sandwich")
library(PSweight)
rm(list=ls())
h.degree=0
pt=0.5
mis.specified=0
rand.seed=6
set.seed(rand.seed)
library(mvtnorm)
#setwd("C:/Users/Shuxi ZENG/Dropbox/Third Year/OW_Randomization/Code")
source("Crude.R")
source("IPWC.R")
source("OW.R")
source("LinearR.R")
#source("DoubleRobust.R")
###Parameter fixed
#n<-60
p<-10
nsim<-2000
#Treatment effect
gamma<-0
##signal_level: Control the explain power of feature, R^2
signal_level=1.0
#Prob of being treated
#pt=0.5
##Control whether the model is correctly specified
##If correctly, then use linear outcome model
##If not, then add quadratic interaction term
#mis.specified=0
##Control the degree of heterogeneout treatment effect
#h.degree=0.5
##Store Results
RMSE=NULL
MC_SD=NULL
EST_SD=NULL
CRATE=NULL
BIAS=NULL
n.grid=seq(50,200,by=10)
n=50
EST<-SE<-COVER<-matrix(NA,nsim,4)
colnames(EST)<-colnames(SE)<-colnames(COVER)<-c("UNADJ","IPW","OW","LR")
x<-rmvnorm(n,rep(0,p),diag(1,p))
z<-rbinom(n,1,pt)
##Use hypergeometric to ensure existence of treat/control
# z=rep(0,n)
# z[sample(1:n,round(n*pt),replace=F)]=1
bsq<-2/(1+2+2^2+2^3+2^4)
betasq<-rep(c(bsq,2*bsq,2^2*bsq,2^3*bsq,2^4*bsq),each=p/5)
deltasq<-2
betasq=(signal_level* deltasq^2)*betasq/sum(betasq)
beta<-sqrt(betasq)
##
beta.tau=rep(1,p)
beta.tau=sqrt(signal_level* deltasq^2)*beta.tau
##Add second order term if misspecified
if (mis.specified==1){
x.inter=x[,1:(p-1)]*x[,2:p]
beta.quad<-rep(bsq,p-1)
beta.quad=(signal_level* deltasq^2)*beta.quad/sum(beta.quad)
beta.quad=sqrt(beta.quad)
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+x.inter%*%beta.quad+gamma*z+rnorm(n,0,sqrt(deltasq)))
##Correctly Specified
}else{
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+gamma*z+rnorm(n,0,sqrt(deltasq)))
}
W=cbind(1,x)
library(mvtnorm)
install.packages(mvtnorm)
install.packages("mvtnorm")
###Parameter fixed
#n<-60
p<-10
nsim<-2000
#Treatment effect
gamma<-0
##signal_level: Control the explain power of feature, R^2
signal_level=1.0
#Prob of being treated
#pt=0.5
##Control whether the model is correctly specified
##If correctly, then use linear outcome model
##If not, then add quadratic interaction term
#mis.specified=0
##Control the degree of heterogeneout treatment effect
#h.degree=0.5
##Store Results
RMSE=NULL
MC_SD=NULL
EST_SD=NULL
CRATE=NULL
BIAS=NULL
n.grid=seq(50,200,by=10)
#n.grid=c(1000,2000,5000)
EST<-SE<-COVER<-matrix(NA,nsim,4)
colnames(EST)<-colnames(SE)<-colnames(COVER)<-c("UNADJ","IPW","OW","LR")
x<-rmvnorm(n,rep(0,p),diag(1,p))
z<-rbinom(n,1,pt)
##Use hypergeometric to ensure existence of treat/control
# z=rep(0,n)
# z[sample(1:n,round(n*pt),replace=F)]=1
bsq<-2/(1+2+2^2+2^3+2^4)
betasq<-rep(c(bsq,2*bsq,2^2*bsq,2^3*bsq,2^4*bsq),each=p/5)
deltasq<-2
betasq=(signal_level* deltasq^2)*betasq/sum(betasq)
beta<-sqrt(betasq)
##
beta.tau=rep(1,p)
beta.tau=sqrt(signal_level* deltasq^2)*beta.tau
##Add second order term if misspecified
if (mis.specified==1){
x.inter=x[,1:(p-1)]*x[,2:p]
beta.quad<-rep(bsq,p-1)
beta.quad=(signal_level* deltasq^2)*beta.quad/sum(beta.quad)
beta.quad=sqrt(beta.quad)
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+x.inter%*%beta.quad+gamma*z+rnorm(n,0,sqrt(deltasq)))
##Correctly Specified
}else{
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+gamma*z+rnorm(n,0,sqrt(deltasq)))
}
W=cbind(1,x)
##Finite sample gamma
gamma_finite=mean(x%*%beta.tau*h.degree)+gamma
library(mvtnorm)
x<-rmvnorm(n,rep(0,p),diag(1,p))
z<-rbinom(n,1,pt)
##Use hypergeometric to ensure existence of treat/control
# z=rep(0,n)
# z[sample(1:n,round(n*pt),replace=F)]=1
bsq<-2/(1+2+2^2+2^3+2^4)
betasq<-rep(c(bsq,2*bsq,2^2*bsq,2^3*bsq,2^4*bsq),each=p/5)
deltasq<-2
betasq=(signal_level* deltasq^2)*betasq/sum(betasq)
beta<-sqrt(betasq)
##
beta.tau=rep(1,p)
beta.tau=sqrt(signal_level* deltasq^2)*beta.tau
##Add second order term if misspecified
if (mis.specified==1){
x.inter=x[,1:(p-1)]*x[,2:p]
beta.quad<-rep(bsq,p-1)
beta.quad=(signal_level* deltasq^2)*beta.quad/sum(beta.quad)
beta.quad=sqrt(beta.quad)
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+x.inter%*%beta.quad+gamma*z+rnorm(n,0,sqrt(deltasq)))
##Correctly Specified
}else{
y<-as.numeric(x%*%beta+x%*%beta.tau*z*h.degree+gamma*z+rnorm(n,0,sqrt(deltasq)))
}
W=cbind(1,x)
gamma_finite=mean(x%*%beta.tau*h.degree)+gamma
#propensity model
form.ps <- z ~ x
# Outcome model
form.out <- y ~ x
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'Y',data=test_data,augmentation = T,out.formula = form.out,family = 'gaussian')
data.frame(y=y,z=z,x=x)
rct_data=data.frame(y=y,z=z,x=x)
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=cbind(y,z,x),augmentation = T,out.formula = form.out,family = 'gaussian')
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=rct_data,augmentation = T,out.formula = form.out,family = 'gaussian')
#propensity model
form.ps <- z ~ x.1
# Outcome model
form.out <- y ~ x.2
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=cbind(y,z,x),augmentation = T,out.formula = form.out,family = 'gaussian')
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=rct_data,augmentation = T,out.formula = form.out,family = 'gaussian')
paste('x',1:10,sep=".")
z ~ paste(paste('x',1:10,sep="."),sep="+")
paste(paste('x',1:10,sep="."),sep="+")
paste(paste('x',1:10,sep="."),sep="+")
(paste('x',1:10,sep=".")
)
paste(paste('x',1:10,sep="."),sep ="+")
paste(paste('x',1:10,sep="."),sep ="+",collapse = T)
paste(paste('x',1:10,sep="."),sep ="+"()
)
paste("a","b",sep="+")
paste(c(paste('x',1:10,sep=".")),sep ="+")
paste((paste('x',1:10,sep=".")[1:4],sep ="+")
paste(paste('x',1:10,sep=".")[1:4],sep ="+")
paste(paste('x',1:10,sep=".")[1:2],sep ="+")
paste(paste('x',1:10,sep=".")[1:2],sep ="+aa")
paste(paste('x',1:10,sep="."),sep ="+")
paste(paste('x',1:10,sep="."),sep ="a")
paste(paste('x',1:10,sep="."),"a",sep ="a")
paste(paste('x',1:10,sep="."),sep="+",collapse = "")
paste(paste('x',1:10,sep="."),collapse = "+")
form.ps <- as.formula(paste("z","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
form.ps
#propensity model
form.ps <- as.formula(paste("z","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
# Outcome model
form.out<- as.formula(paste("y","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
rct.data=data.frame(y=y,z=z,x=x)
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=rct.data,augmentation = T,out.formula = form.out,family = 'gaussian')
aipw$muhat
summary(aipw,type='DIF',contrast=c(-1,1))
aipw$muhat
aipw$group
#propensity model
form.ps <- as.formula(paste("z","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
# Outcome model
form.out<- as.formula(paste("y","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
rct.data=data.frame(y=y,z=z,x=x)
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=rct.data,augmentation = T,out.formula = form.out,family = 'gaussian')
aipw_summary=summary(aipw,type='DIF',contrast=c(-1,1))
aipw_summary$inference
aipw_summary$inference[1]
fit <- glm(z ~ W, family = binomial(link = "logit"))
e.h <- as.numeric(fit.ps$fitted.values)
##Calculate IPW weights
w.h=z*1/e.h+(1-z)*1/(1-e.h)
###Linear Regression with interaction
###center the covariate
W=scale(W,scale=FALSE)
fit.ps <- glm(z ~ W, family = binomial(link = "logit"))
e.h <- as.numeric(fit.ps$fitted.values)
##Calculate IPW weights
w.h=z*1/e.h+(1-z)*1/(1-e.h)
###Linear Regression with interaction
###center the covariate
W=scale(W,scale=FALSE)
lr_model=lm(y~z+W+W*z)
n=length(z)
##Double Robust Esitimator
m1=predict.lm(lr_model,newdata=data.frame(z=rep(1,n),W=W))
m0=predict.lm(lr_model,newdata=data.frame(z=rep(0,n),W=W))
##Point Estimate
tau=mean(z*(y-m1)*w.h+(1-z)*(y-m0)*w.h)+lr_model$coefficients['z']
n
tau
gamma_finite
#propensity model
form.ps <- as.formula(paste("z","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
# Outcome model
form.out<- as.formula(paste("y","~",paste(paste('x',1:10,sep="."),collapse = "+"),sep=""))
rct.data=data.frame(y=y,z=z,x=x)
aipw<-PSweight(weight = 'ATE',ps.formula = form.ps,yname = 'y',data=rct.data,augmentation = T,out.formula = form.out,family = 'gaussian')
aipw_summary=summary(aipw,type='DIF',contrast=c(-1,1))
est=aipw_summary$inference[1]
se=aipw_summary$inference[2]
est
se
dim(x)
lr_model=lm(y~z+W+W*z)
predict.lm(lr_model,newdata=data.frame(z=rep(1,n),W=W))
sessionInfo()
